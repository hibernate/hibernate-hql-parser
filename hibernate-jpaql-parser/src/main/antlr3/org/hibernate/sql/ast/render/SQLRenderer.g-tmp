tree grammar SQLRenderer;

options{
	output=template;
	tokenVocab=HQL;
}

@header {
/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * Copyright (c) 2008, Red Hat Inc. or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU
 * Lesser General Public License, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this distribution; if not, write to:
 * Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor
 * Boston, MA  02110-1301  USA
 *
 * Portions of SQL grammar parsing copyright (C) 2003 by Lubos Vnuk.  All rights
 * reserved.  These portions are distributed under license by Red Hat Middleware
 * LLC and are covered by the above LGPL notice.  If you redistribute this material,
 * with or without modification, you must preserve this copyright notice in its
 * entirety.
 */
package org.hibernate.sql.ast.render;
}

orderByClause
    : ^( ORDER_BY sortSpecs+=sortSpecification+ )
        ->  orderByClause( sortSpecifications={$sortSpecs} )
    ;

orderByFragment
    : ^( ORDER_BY sortSpecs+=sortSpecification+ )
        ->  orderByFragment( sortSpecifications={$sortSpecs} )
    ;

sortSpecification
    : ^( SORT_SPEC sortKey collationSpecification? orderingSpecification? )
        ->  sortSpecification(
                    sortKey={$sortKey.st},
                    collationSpecification={$collationSpecification.st},
                    orderingSpecification={$orderingSpecification.st}
            )
    ;

sortKey
    : valueExpression
    ;


valueExpression
    : numericValueExpression

     |     <string value expression>
     |     <datetime value expression>
     |     <interval value expression>
     |     <boolean value expression>
     |     <user-defined type value expression>
     |     <row value expression>
     |     <reference value expression>
     |     <collection value expression>
    ;

numericValueExpression
    : term
    |     <numeric value expression> <plus sign> <term>
     |     <numeric value expression> <minus sign> <term>
    ;

term
    : factor
    | ^( ASTERISK term factor )
    | ^( SOLIDUS term factor )

factor
    :
    ;

  <factor>    ::=   [ <sign> ] <numeric primary>

numericPrimary
    : valueExpressionPrimary
    | numericValyeFunction
    ;

valueExpressionPrimary
    : parenthesizedValueExpression
    | <nonparenthesized value expression primary>
    ;

parenthesizedValueExpression
    : ^( VECTOR_EXPR valueExpression )
    ;

nonparenthesizedValueExpressionPrimary
    :
         <unsigned value specification>
     |     <column reference>
     |     <set function specification>
     |     <scalar subquery>
     |     <case expression>
     |     <cast specification>
     |     <subtype treatment>
     |     <attribute or method reference>
     |     <reference resolution>
     |     <collection value constructor>
     |     <routine invocation>
     |     <field reference>
     |     <element reference>
     |     <method invocation>
     |     <static method invocation>
     |     <new specification>
    ;

unsignedValueSpecification
    : unsignedLiteral
    | <general value specification>
    ;

unsignedLiteral
    : unsignedNumericLiteral
    | generalLiteral
    ;

generalValueSpecification
    :
    ;

unsignedNumericLiteral
	:	INTEGER_LITERAL
	|	DECIMAL_LITERAL
	|	FLOATING_POINT_LITERAL
    ;

generalLiteral
    : STRING_LITERAL
    | CHARACTER_LITERAL
    | HEX_LITERAL
    | OCTAL_LITERAL
    | booleanLiteral
    | dateTimeLiteral
    | intervalLiteral

     |     <national character string literal>
     |     <bit string literal>
     |     <hex string literal>
     |     <binary string literal>
     |     <datetime literal>
     |     <interval literal>
     |     <boolean literal>
    ;

booleanLiteral
    : TRUE
    | FALSE
    ;

dateTimeLiteral
    :
    ;

intervalLiteral
    :
    ;
